from collections.abc import Callable, Awaitable
from typing import Any

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, CallbackQuery
from datetime import datetime, UTC

from loguru import logger

from utils.tg import delete_message


class CallbackTimelimiterMiddleware(BaseMiddleware):
    """
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø—É—Å—Ç—è 5 –º–∏–Ω—É—Ç.
    –í –Ω–æ—Ä–º–µ –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã —É–¥–∞–ª—è—é—Ç—Å—è, –Ω–æ –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ,
    –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –ü–û –∏ –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
    –Ω–∞–∂–∞—Ç—å –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–Ω–æ–ø–∫–∏.
    """

    async def __call__(
        self,
        handler: Callable[
            [TelegramObject, dict[str, Any]], Awaitable[Any]
        ],
        callback: CallbackQuery,
        data: dict[str, Any],
    ) -> Any:
        sending_time = callback.message.date
        now = datetime.now(UTC)
        minutes = (now - sending_time).seconds // 60
        if minutes > 5:
            await callback.answer(
                "üôÇ–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞–∂–º–∏ –Ω–æ–≤—É—é", show_alert=True
            )
            await delete_message(message=callback.message)
            logger.warning(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} ({}) "
                "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫–Ω–æ–ø–∫—É ({}) —Å —Ç–µ–∫—Å—Ç–æ–º:\n\n{}\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é {}, –≤ {} —á–µ—Ä–µ–∑ {} –º–∏–Ω—É—Ç",
                callback.from_user.full_name,
                callback.from_user.id,
                callback.message.message_id,
                callback.message.text,
                sending_time,
                now,
                minutes,
            )
            return None
        return await handler(callback, data)
