from typing import TYPE_CHECKING

from aiogram.filters import CommandObject
from aiogram.utils.chat_action import ChatActionSender

from general import settings
from general.commands import PrivateCommands
from services.base import RouterHelper
from utils.pretty_text import make_build
from html import escape

if TYPE_CHECKING:
    from ai.client import RAGSystem


class AIManager(RouterHelper):
    async def answer_question(
        self, ai: "RAGSystem", command: CommandObject
    ):
        question = command.args
        if not question:
            await self.message.reply(
                text=make_build(
                    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É, –ø—Ä–∏–º–µ—Ä:\n\n"
                )
                + f"/{PrivateCommands.q.name} –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–≤–∫–∏?"
            )
            return
        await self.message.answer(
            make_build(
                "ü•∫–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!\n\n"
                "–û—Ç–≤–µ—Ç Mafia AI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
            )
        )
        async with ChatActionSender.typing(
            bot=self.message.bot,
            chat_id=self.message.from_user.id,
        ):
            response = await ai.query(question=question)
            if response == settings.ai.unavailable_message:
                text = response
            else:
                text = (
                    f"{response[:3950]}\n\n‚ö†Ô∏è–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Mafia AI. "
                    f"–¢–æ–ª—å–∫–æ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è."
                )
            await self.message.answer(escape(text))
