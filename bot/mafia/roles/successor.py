from aiogram.exceptions import TelegramAPIError
from aiogram.types import InlineKeyboardButton
from exceptiongroup import suppress

from cache.cache_types import RolesLiteral, GameCache, UserIdInt
from general.groupings import Groupings
from keyboards.inline.buttons.common import REFUSE_MOVE_BTN
from mafia.roles import ActiveRoleAtNightABC, RoleABC
from mafia.roles.base.mixins import (
    ObligatoryKillerABC,
    FinisherOfNight,
)
from mafia.roles.descriptions.description import RoleDescription
from mafia.roles.descriptions.texts import PAYMENT_FOR_NIGHTS
from states.game import UserFsm
from utils.informing import notify_aliases_about_transformation
from utils.pretty_text import make_build
from utils.roles import (
    change_role,
    get_user_role_and_url,
)
from utils.state import get_state_and_assign


class Successor(
    FinisherOfNight, ObligatoryKillerABC, ActiveRoleAtNightABC
):
    role = "–¢–µ–Ω–µ–ø—Ä–µ–µ–º–Ω–∏–∫"
    role_id: RolesLiteral = "successor"
    mail_message = "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å —É–±–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –∂–µ—Ä—Ç–≤—ã"
    need_to_monitor_interaction = False
    photo = "https://i.pinimg.com/originals/1b/9f/c7/1b9fc7e4079c3835ab95c64fb46928f4.png"
    purpose = "–¢—ã –æ–±—ã—á–Ω—ã–π –º–∏—Ä–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞–¥–æ–µ—Å—Ç, —É–±–µ–π –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏ –ø–æ–ª—É—á–∏ –¥—Ä—É–≥—É—é —Ä–æ–ª—å"
    grouping = Groupings.civilians
    message_to_user_after_action = "–¢—ã –≤—ã–±—Ä–∞–ª —É–±–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å {url}, –µ—Å–ª–∏ —Ç–æ—Ç –≤—ã–∂–∏–≤–µ—Ç –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"
    message_to_group_after_action = (
        "–ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –≤–µ–¥—ë—Ç –∫ –Ω–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–º–µ–Ω–µ –≤–ª–∞—Å—Ç–∏! "
        "–†–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∂–µ —Ä–≤—É—Ç—Å—è —É—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≤–æ–ª—é—Ü–∏—é!"
    )
    payment_for_treatment = 4
    payment_for_murder = 11
    payment_for_night_spent = 8
    notification_message = None

    def generate_markup(
        self,
        player_id: UserIdInt,
        game_data: GameCache,
        extra_buttons: tuple[InlineKeyboardButton, ...] = (),
    ):
        extra_buttons = (REFUSE_MOVE_BTN,)
        return super().generate_markup(
            player_id=player_id,
            game_data=game_data,
            extra_buttons=extra_buttons,
        )

    @property
    def role_description(self) -> RoleDescription:
        from .poisoner import Poisoner
        from .analyst import Analyst

        return RoleDescription(
            skill="–ú–æ–∂–µ—Ç —É–±–∏—Ç—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–º—Ä—ë—Ç —Ä–∞–Ω—å—à–µ: –ø–æ—Å–ª–µ –Ω–æ—á–∏ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è. "
            "–ü–æ—Ç–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –¥–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∑–∞ –Ω–µ–≥–æ. "
            f"–ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–≥–∏–±—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, "
            f"({Poisoner.pretty_role}, {Analyst.pretty_role}), "
            f"—Ç–æ –æ–Ω –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏ —É –ø–æ–≥–∏–±—à–µ–≥–æ.",
            pay_for=[PAYMENT_FOR_NIGHTS],
            features=[
                "–ï—Å–ª–∏ –ø–æ–≥–∏–±—à–∏–π –∏–≥—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä –î–æ–∫—Ç–æ—Ä, –≤—ã–±—Ä–∞–ª –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é –≤—ã–ª–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ê, "
                "—Ç–æ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–æ–ª–µ–π –¢–µ–Ω–µ–ø—Ä–µ–µ–º–Ω–∏–∫ (–Ω–æ–≤—ã–π –≤—Ä–∞—á) —Ç–∞–∫–∂–µ —Å–º–æ–∂–µ—Ç –≤—ã–ª–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –ê",
                "–£–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",
            ],
            limitations=[
                "–ú–æ–∂–µ—Ç —É–±–∏–≤–∞—Ç—å –∏ –º–µ–Ω—è—Ç—å —Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 1-–æ–π –Ω–æ—á–∏",
                "–ï—Å–ª–∏ —É–º–∏—Ä–∞–µ—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω—è—é—Ç—Å—è",
            ],
        )

    def __init__(self):
        self.state_for_waiting_for_action = (
            UserFsm.HEIR_CHOOSES_TARGET
        )
        self.new_role: RoleABC | None = None
        self.user_id: UserIdInt | None = None

    def kill_after_all_actions(
        self,
        game_data: GameCache,
        current_inactive_users: list[UserIdInt],
    ) -> tuple[UserIdInt, str] | None:
        if not game_data[self.roles_key]:
            return None
        processed_user_id = self.get_processed_user_id(game_data)
        if processed_user_id is None:
            return None
        if processed_user_id not in game_data["live_players_ids"]:
            return None
        processed_role, user_url = get_user_role_and_url(
            game_data=game_data,
            processed_user_id=processed_user_id,
            all_roles=self.all_roles,
        )
        self.new_role = processed_role
        self.user_id = game_data[self.roles_key][0]
        change_role(
            game_data=game_data,
            previous_role=self,
            new_role=self.new_role,
            user_id=game_data[self.roles_key][0],
        )
        return (
            processed_user_id,
            "üòâ–ù–∞ —Ç–≤–æ—ë –º–µ—Å—Ç–æ –ø—Ä–∏—à–µ–ª –ø—Ä–µ–µ–º–Ω–∏–∫. –ü–æ–∂–µ–ª–∞–π –µ–º—É —É–¥–∞—á–∏!",
        )

    async def end_night(self, game_data: GameCache):
        if (
            self.new_role is None
            or self.user_id not in game_data["live_players_ids"]
        ):
            return
        updated_new_role = self.all_roles[
            game_data["players"][str(self.user_id)]["role_id"]
        ]

        if updated_new_role.state_for_waiting_for_action:
            await get_state_and_assign(
                dispatcher=self.dispatcher,
                chat_id=self.user_id,
                bot_id=self.bot.id,
                new_state=updated_new_role.state_for_waiting_for_action,
            )
        with suppress(TelegramAPIError):
            await self.bot.send_photo(
                chat_id=self.user_id,
                photo=updated_new_role.photo,
                caption=make_build(
                    f"‚ùóÔ∏è–û—Ç–Ω—ã–Ω–µ —Ç–≤–æ—è –Ω–æ–≤–∞—è —Ä–æ–ª—å ‚Äî {updated_new_role.pretty_role}"
                ),
            )

        if (updated_new_role.grouping == Groupings.criminals) or (
            (updated_new_role.alias or updated_new_role.is_alias)
            and game_data["settings"]["show_peaceful_allies"]
        ):
            await notify_aliases_about_transformation(
                game_data=game_data,
                bot=self.bot,
                new_role=updated_new_role,
                user_id=self.user_id,
                exclude_user=True,
            )
