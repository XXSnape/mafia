from cache.cache_types import GameCache, RolesLiteral, UserIdInt
from cache.extra import ExtraCache
from general import settings
from general.groupings import Groupings
from mafia.roles.base import ActiveRoleAtNightABC
from mafia.roles.base.mixins import (
    ObligatoryKillerABC,
    ProcedureAfterVotingABC,
)
from mafia.roles.descriptions.description import RoleDescription
from mafia.roles.descriptions.texts import GUARANTEED_TO_KILL
from states.game import UserFsm
from utils.roles import get_user_role_and_url


class Pirate(
    ObligatoryKillerABC,
    ProcedureAfterVotingABC,
    ActiveRoleAtNightABC,
):
    role = "–ü–∏—Ä–∞—Ç"
    role_id: RolesLiteral = "pirate"
    photo = (
        "https://masterpiecer-images.s3.ya"
        "ndex.net/8e407a86a1a611ee8282f6f8c1ba65ae:upscaled"
    )
    grouping = Groupings.other
    purpose = (
        "–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å –º–µ—á–µ–Ω–æ–≥–æ –∏ —Å–º–µ—Ä—Ç–Ω–∏–∫–∞. –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–º–µ—Ä—Ç–Ω–∏–∫–∞ –ª–∏–Ω—á—É—é—Ç, "
        "–∞ –º–µ—á–µ–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –ø–æ–≤–µ—à–µ–Ω–∏–µ, –º–µ—á–µ–Ω—ã–π –ø–æ–≥–∏–±–Ω–µ—Ç"
    )
    message_to_group_after_action = "–ù–∞ –∫–æ–º-—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —á—ë—Ä–Ω—É—é –º–µ—Ç–∫—É! –ë—É–¥—å—Ç–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!"
    mail_message = "–ö–æ–≥–æ –ø–æ–º–µ—Ç–∏—à—å –∏ —É–±—å–µ—à—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–µ—Ä—Ç–≤—ã?"
    notification_message = None
    need_to_monitor_interaction = False
    need_to_process = False
    payment_for_treatment = 4
    payment_for_murder = 12
    number_in_order_after_voting = 3
    extra_data = [ExtraCache(key="marked")]

    @property
    def role_description(self) -> RoleDescription:
        return RoleDescription(
            skill="–í—ã–±–∏—Ä–∞–µ—Ç –∫–∞–∂–¥—É—é –Ω–æ—á—å 2 –∏–≥—Ä–æ–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –º–µ—á–µ–Ω–æ–≥–æ, –ø–æ—Ç–æ–º —Å–º–µ—Ä—Ç–Ω–∏–∫–∞. "
            "–ï—Å–ª–∏ –º–µ—á–µ–Ω—ã–π –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ª–∏–Ω—á–µ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞, "
            "–∏ —Å–º–µ—Ä—Ç–Ω–∏–∫ –ø–æ–≥–∏–± –ø–æ –∏—Ç–æ–≥—É, –º–µ—á–µ–Ω—ã–π —É–º–∏—Ä–∞–µ—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º.",
            pay_for=["–£–±–∏–π—Å—Ç–≤–æ –º–µ—á–µ–Ω—ã—Ö"],
            features=[
                GUARANTEED_TO_KILL,
            ],
            wins_if="–£–±–∏—Ç—å —Å—Ç–æ–ª—å–∫–æ –º–µ—á–µ–Ω—ã—Ö, —Å–∫–æ–ª—å–∫–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ "
            "–≤—Å–µ–≥–æ, –¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ 4. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–≥—Ä–∞—é—Ç 5 —á–µ–ª–æ–≤–µ–∫, –Ω—É–∂–Ω–æ —É–±–∏—Ç—å –æ–¥–Ω–æ–≥–æ, –µ—Å–ª–∏ 8, —Ç–æ–≥–¥–∞ –¥–≤—É—Ö –∏ —Ç.–¥.",
        )

    def __init__(self):
        self.state_for_waiting_for_action = (
            UserFsm.PIRATE_CHOOSES_SUBJECT
        )
        self.necessary_to_win: int | None = None
        self.aim_id: UserIdInt | None = None
        self.number_of_marked = 0

    def introducing_users_to_roles(self, game_data: GameCache):
        self.necessary_to_win = (
            len(game_data["live_players_ids"]) // 4
        )
        self.purpose = (
            f"{self.purpose}\n\n"
            f"–î–ª—è –ø–æ–±–µ–¥—ã –Ω—É–∂–Ω–æ —É–±–∏—Ç—å {self.necessary_to_win} –º–µ—á–µ–Ω—ã—Ö"
        )
        return super().introducing_users_to_roles(
            game_data=game_data
        )

    def get_money_for_victory_and_nights(
        self,
        game_data: GameCache,
        **kwargs,
    ):
        if self.number_of_marked >= self.necessary_to_win:
            payment = (
                40
                * (
                    len(game_data["players"])
                    // settings.mafia.minimum_number_of_players
                )
                * self.number_of_marked
            )
            return payment, 0
        return 0, 0

    def kill_after_all_actions(
        self,
        game_data: GameCache,
        current_inactive_users: list[UserIdInt],
    ) -> tuple[UserIdInt, str] | None:
        if self.aim_id is None:
            return None
        self.number_of_marked += 1
        role, url = get_user_role_and_url(
            game_data=game_data,
            processed_user_id=self.aim_id,
            all_roles=self.all_roles,
        )
        self.add_money_to_all_allies(
            game_data=game_data,
            money=30,
            beginning_message="–í–æ–∑–º–µ–∑–¥–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ",
            user_url=url,
            processed_role=role,
            at_night=False,
        )
        user_id = self.aim_id
        self.aim_id = None
        return (
            user_id,
            "üò¢–¢—ã —Å—Ç–∞–ª –∂–µ—Ä—Ç–≤–æ–π –ø—Ä–æ–∫–ª—è—Ç—å—è. –ù–∞–ø–∏—à–∏ –∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞",
        )

    async def take_action_after_voting(
        self,
        game_data: GameCache,
        removed_user: list[UserIdInt],
        **kwargs,
    ):
        marked_users = game_data["marked"]
        if len(marked_users) != 2:
            return
        aim, bomber = marked_users
        if bomber != removed_user[0]:
            return
        if aim not in game_data["pros"]:
            return
        self.aim_id = aim

    def cancel_actions(
        self, game_data: GameCache, user_id: UserIdInt
    ):
        game_data["marked"].clear()
        return super().cancel_actions(
            game_data=game_data, user_id=user_id
        )
