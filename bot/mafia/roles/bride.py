from contextlib import suppress
from random import choice

from aiogram.exceptions import TelegramAPIError
from cache.cache_types import GameCache, RolesLiteral, UserIdInt
from general.groupings import Groupings
from mafia.roles.base import ActiveRoleAtNightABC
from mafia.roles.base.mixins import (
    ProcedureAfterNightABC,
    SunsetKillerABC,
)
from mafia.roles.descriptions.description import RoleDescription
from mafia.roles.descriptions.texts import (
    DONT_PAY_FOR_VOTING,
    GUARANTEED_TO_KILL,
)
from utils.pretty_text import make_build
from utils.roles import get_processed_user_id_if_exists


class Bride(
    SunsetKillerABC,
    ProcedureAfterNightABC,
    ActiveRoleAtNightABC,
):
    role = "–ö—Ä–æ–≤–∞–≤–∞—è –Ω–µ–≤–µ—Å—Ç–∞"
    role_id: RolesLiteral = "bride"
    grouping = Groupings.other
    purpose = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –ø–µ—Ä–≤—É—é –Ω–æ—á—å –≤—ã–±–µ—Ä–∏ –∂–µ–Ω–∏—Ö–∞ –∏ –¥–µ–ª–∞–π –≤—Å–µ, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–ª—Å—è –∂–∏–≤—ã–º"
    message_to_group_after_action = (
        "–ó–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ –ª—é–±–æ–π –º–æ–∂–µ—Ç, –Ω–æ –≤—Å–µ –ª–∏ —É–º—Ä—É—Ç –≤ –æ–¥–∏–Ω –¥–µ–Ω—å?"
    )
    photo = "https://i.pinimg.com/736x/34/2b/eb/342bebbc1da7ac2937fc7555cc1e0e7f.jpg"
    mail_message = "–ö–æ–≥–æ –≤–æ–∑—å–º–µ—à—å –≤ –º—É–∂—å—è?"
    message_to_user_after_action = (
        "–¢–≤–æ–π –≤—ã–±–æ—Ä –ø–∞–ª –Ω–∞ —Å–≤–∞–¥—å–±—É —Å {url}"
    )
    need_to_monitor_interaction = False
    send_weekend_alerts = False
    notification_message = None
    payment_for_treatment = 5
    payment_for_murder = 13

    @property
    def role_description(self) -> RoleDescription:
        return RoleDescription(
            skill="–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ–Ω–∏—Ö–∞ (–∏–Ω–∞—á–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É) "
            "–∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–ª–∞–µ—Ç –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —Å—É–∂–µ–Ω—ã–π –≤—ã–∂–∏–ª. "
            "–ï—Å–ª–∏ –µ–≥–æ —É–±—å—é—Ç, –ù–µ–≤–µ—Å—Ç–∞ —Ç–∞–∫ –∂–µ —É–º–∏—Ä–∞–µ—Ç –¥–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—á–∏. "
            "–ï—Å–ª–∏ –ù–µ–≤–µ—Å—Ç—É —É–±—å—é—Ç —Ä–∞–Ω—å—à–µ, –∫–∞–∂–¥—É—é —á—ë—Ç–Ω—É—é –Ω–æ—á—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –±—É–¥—É—Ç "
            "—É–º–∏—Ä–∞—Ç—å –∂–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞, –Ω–æ –Ω–µ –∂–µ–Ω–∏—Ö. "
            "–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–≥–∏–±–Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–∏–∫.",
            pay_for=[
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π, –ø—Ä–æ–∂–∏—Ç—ã—Ö –∂–µ–Ω–∏—Ö–æ–º, –µ—Å–ª–∏ –æ–Ω –≤—ã–∂–∏–ª"
            ],
            wins_if="–ñ–µ–Ω–∏—Ö –¥–æ–ª–∂–µ–Ω –≤—ã–∂–∏—Ç—å",
            features=[
                "–ñ–µ–Ω–∏—Ö —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —É –Ω–µ–≥–æ –ø—Ä–æ—à–ª–∞ —Å–≤–∞–¥—å–±–∞, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –Ω–µ–≤–µ—Å—Ç—É",
                GUARANTEED_TO_KILL,
                "–•–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω—ë–Ω",
            ],
            limitations=[DONT_PAY_FOR_VOTING],
        )

    def get_money_for_victory_and_nights(
        self, game_data: GameCache, nights_lived: int, **kwargs
    ):
        if (
            self.groom_id is None
            or self.groom_id not in game_data["live_players_ids"]
        ):
            return 0, 0
        return game_data["number_of_night"] * 10, (
            self.payment_for_night_spent * nights_lived
        )

    @get_processed_user_id_if_exists
    async def procedure_after_night(
        self,
        game_data: GameCache,
        processed_user_id: UserIdInt,
        **kwargs
    ):
        self.groom_id = processed_user_id
        with suppress(TelegramAPIError):
            await self.bot.send_message(
                chat_id=self.groom_id,
                text=make_build(
                    "üòÖ–¢–∏–ª–∏-—Ç–∏–ª–∏ —Ç–µ—Å—Ç–æ, –∂–µ–Ω–∏—Ö –∏ –Ω–µ–≤–µ—Å—Ç–∞\n\n"
                    "–£ —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∞—Å—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –∂–µ–Ω–∞, "
                    "–≥–æ—Ç–æ–≤–∞—è –æ–±–µ—Ä–µ–≥–∞—Ç—å —Ç–µ–±—è –æ—Ç –≤—Å–µ—Ö –±–µ–¥!"
                ),
                protect_content=game_data["settings"][
                    "protect_content"
                ],
            )

    @staticmethod
    def allow_sending_mailing(game_data: GameCache):
        return game_data["number_of_night"] == 1

    async def accrual_of_overnight_rewards(self, **kwargs):
        return

    def kill_after_all_actions(
        self,
        game_data: GameCache,
        current_inactive_users: list[UserIdInt],
    ) -> tuple[UserIdInt, str] | None:

        if self.dropped_out or (
            len(current_inactive_users) != 0
            and any(
                game_data["players"][str(player_id)]["role_id"]
                == self.role_id
                for player_id in current_inactive_users
            )
        ):
            return None
        if self.groom_id is None and game_data[self.roles_key]:
            return (
                game_data[self.roles_key][0],
                "üò°–¢—ã –≤—ã–±—ã–≤–∞–µ—à—å –∏–∑ –∏–≥—Ä—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –∂–µ–Ω–∏—Ö–∞ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –ø–µ—Ä–≤—É—é –Ω–æ—á—å! "
                "–ú–æ–∂–µ—à—å –∏–∑–≤–∏–Ω–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏.",
            )
        if (
            self.groom_id not in game_data["live_players_ids"]
            and game_data[self.roles_key]
        ):
            return (
                game_data[self.roles_key][0],
                "üò¢–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ–π –∂–µ–Ω–∏—Ö –ø–æ–≥–∏–±, –∞ —Ç—ã —Å –Ω–∏–º! –ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ.",
            )
        if (
            not game_data[self.roles_key]
            and self.groom_id in game_data["live_players_ids"]
            and game_data["number_of_night"] % 2 == 0
        ):
            players = [
                user_id
                for user_id in game_data["live_players_ids"]
                if user_id != self.groom_id
            ]
            return (
                choice(players),
                "üò¢–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–±—è —É–±–∏–ª –¥—É—Ö —Ä–∞–∑—ä—è—Ä—ë–Ω–Ω–æ–π –Ω–µ–≤–µ—Å—Ç—ã. "
                "–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ, —á—Ç–æ –¥—É–º–∞–µ—à—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É.",
            )
        return None

    def cancel_actions(
        self, game_data: GameCache, user_id: UserIdInt
    ):
        return False

    def __init__(self):
        super().__init__()
        self.groom_id: UserIdInt | None = None
