from cache.cache_types import GameCache, RolesLiteral, UserIdInt
from general import settings
from general.groupings import Groupings
from general.text import NUMBER_OF_NIGHT, ROLE_IS_KNOWN
from mafia.roles import ActiveRoleAtNightABC, RoleABC
from mafia.roles.base.mixins import (
    ProcedureAfterNightABC,
    SunsetKillerABC,
)
from mafia.roles.descriptions.description import RoleDescription
from utils.informing import send_a_lot_of_messages_safely
from utils.roles import (
    get_processed_role_and_user_if_exists,
)


class Martyr(
    SunsetKillerABC,
    ProcedureAfterNightABC,
    ActiveRoleAtNightABC,
):
    role = "–ú—É—á–µ–Ω–∏–∫"
    role_id: RolesLiteral = "martyr"
    grouping = Groupings.civilians
    purpose = "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–¥–∞—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –≤–∑–∞–º–µ–Ω –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–π-–ª–∏–±–æ —Ä–æ–ª–∏"
    message_to_group_after_action = None
    photo = "https://i.pinimg.com/originals/aa/42/cf/aa42cfa177fad99b24ce22131f5b7869.jpg"
    mail_message = "–ó–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º —Ç—ã –æ—Ç–¥–∞—à—å –∂–∏–∑–Ω—å?"
    message_to_user_after_action = "–¢—ã –≤—ã–±—Ä–∞–ª —É–∑–Ω–∞—Ç—å —Ä–æ–ª—å {url} –∏ —É–º–µ—Ä–µ—Ç—å –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—á–∏"
    need_to_monitor_interaction = False
    notification_message = ROLE_IS_KNOWN
    payment_for_treatment = 10
    payment_for_murder = 14
    is_possible_to_skip_move = True
    number_in_order_after_sunset = 0

    @property
    def role_description(self) -> RoleDescription:
        return RoleDescription(
            skill="–ú–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Ä–æ–ª—å –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –Ω–æ –ø–æ—Ç–æ–º "
            "—É–º—Ä—ë—Ç –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ—á–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ä–∞–Ω—å—à–µ",
            pay_for=["–ü—Ä–æ–≤–µ—Ä–∫—É –∏–≥—Ä–æ–∫–∞"],
            features=["–ó–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—é—é —Å–º–µ—Ä—Ç—å –ø–ª–∞—Ç—è—Ç –±–æ–ª—å—à–µ"],
        )

    @get_processed_role_and_user_if_exists
    async def procedure_after_night(
        self,
        game_data: GameCache,
        processed_role: RoleABC,
        processed_user_id: UserIdInt,
        user_url: str,
        **kwargs,
    ):
        self.need_to_die = True
        await send_a_lot_of_messages_safely(
            bot=self.bot,
            users=game_data[self.roles_key],
            text=NUMBER_OF_NIGHT.format(game_data["number_of_night"])
            + f"{user_url} ‚Äî {processed_role.pretty_role}",
            protect_content=game_data["settings"]["protect_content"],
        )

    @get_processed_role_and_user_if_exists
    async def accrual_of_overnight_rewards(
        self,
        game_data: GameCache,
        processed_role: RoleABC,
        processed_user_id: UserIdInt,
        user_url: str,
        **kwargs,
    ):
        money = max(
            (
                len(game_data["players"])
                // settings.mafia.minimum_number_of_players
            )
            * 100
            - (20 * game_data["number_of_night"]),
            0,
        )
        self.add_money_to_all_allies(
            game_data=game_data,
            money=money,
            user_url=user_url,
            processed_role=processed_role,
            beginning_message="–°–º–µ—Ä—Ç—å –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
        )

    def kill_after_all_actions(
        self,
        game_data: GameCache,
        current_inactive_users: list[UserIdInt],
        cured_users: list[UserIdInt],
    ) -> tuple[UserIdInt, str] | None:
        if self.need_to_die and game_data[self.roles_key]:
            self.need_to_die = False
            return (
                game_data[self.roles_key][0],
                "ü´°–¢—ã –ø–æ–≥–∏–± –≤–æ –∏–º—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–≤–æ–∏—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ.",
            )
        return None

    def __init__(self):
        super().__init__()
        self.need_to_die: bool = False
