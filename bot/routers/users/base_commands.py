from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.state import default_state
from aiogram.types import Message, CallbackQuery
from sqlalchemy import Grouping
from sqlalchemy.ext.asyncio import AsyncSession

from database.dao.users import UsersDao
from database.schemas.common import TgId
from general.collection_of_roles import get_data_with_roles
from general.groupings import Groupings
from keyboards.inline.callback_factory.help import RoleCbData
from keyboards.inline.cb.cb_text import VIEW_ROLES_CB, HELP_CB
from keyboards.inline.keypads.help import (
    help_options_kb,
    get_roles_kb,
    go_back_to_options_kb,
)
from utils.pretty_text import make_build, make_pretty

router = Router(name=__name__)


@router.message(CommandStart(), StateFilter(default_state))
async def greetings_to_user(
    message: Message, session_with_commit: AsyncSession
):
    await UsersDao(session=session_with_commit).get_user_or_create(
        tg_id=TgId(tg_id=message.from_user.id)
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –≤–µ–¥—É—â–∏–π –≤ –¥–ª—è –º–∞—Ñ–∏–∏. –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç."
    )


@router.message(Command("help"))
async def handle_help_by_command(message: Message):
    await message.delete()
    text = (
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?\n"
        "–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!"
    )
    await message.answer(
        make_build(text), reply_markup=help_options_kb()
    )


@router.callback_query(F.data == HELP_CB)
async def handle_help_by_callback(callback: CallbackQuery):
    await callback.message.delete()
    text = (
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?\n"
        "–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º!\n"
        "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö:"
        "- –í —Å–ª—É—á–∞–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è "
    )
    await callback.message.answer(
        make_build(text), reply_markup=help_options_kb()
    )


@router.callback_query(F.data == VIEW_ROLES_CB)
async def view_roles(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        text=(
            make_build(
                "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö:\n"
                "‚óè –í —Å–ª—É—á–∞–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –¥–µ–Ω—å–≥–∏ –Ω–∏ –∑–∞ —á—Ç–æ –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è\n"
                "‚óè –ù–æ—á–Ω—ã–µ —Ä–æ–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–µ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —Å–µ–±—è\n"
                "‚óè –£ —Ä–æ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—é–∑–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—É–ø—è—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏ –≥–ª–∞–≤–∞—Ä—è"
            )
        ),
        reply_markup=get_roles_kb(),
    )


def join(strings: list[str] | None):
    if strings is None:
        return "–ù–µ—Ç"
    strings = [string.capitalize() for string in strings]
    return "\n‚óè " + "\n‚óè ".join(strings)


@router.callback_query(RoleCbData.filter())
async def get_details_about_role(
    callback: CallbackQuery, callback_data: RoleCbData
):
    current_role = get_data_with_roles(callback_data.role_id)
    description = current_role.role_description
    if current_role.is_alias:
        text = (
            f"–†–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ—é–∑–Ω–æ–π –∫ {make_pretty(current_role.boss_name)}. "
            f"–í —Å–ª—É—á–∞–µ —Å–º–µ—Ä—Ç–∏ –≥–ª–∞–≤–∞—Ä—è –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫\n\n"
        )
        if current_role.is_mass_mailing_list:
            text += "–ú–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤—ã–±–æ—Ä –Ω–æ—á—å—é"
        else:
            text += "–ù–µ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤—ã–±–æ—Ä –Ω–æ—á—å—é"
    else:
        text = (
            f"üèÜ–£—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã: {description.wins_if.capitalize()}\n\n"
            f"üí™–û—Å–æ–±—ã–π –Ω–∞–≤—ã–∫: {(description.skill or "–ù–µ—Ç").capitalize()}\n\n"
            f"üí∞–ü–ª–∞—Ç—è—Ç –∑–∞: {join(description.pay_for)}\n\n"
            f"üö´–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {join(description.limitations)}\n\n"
            f"‚ú®–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {join(description.features)}"
        )

    common_text = (
        f"ü™™–ù–∞–∑–≤–∞–Ω–∏–µ: {make_pretty(current_role.role)}\n\n"
        f"üé≠–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {make_build(current_role.grouping.value.name)}\n\n"
    )
    purpose_of_grouping = None
    if current_role.grouping in (
        Groupings.criminals,
        Groupings.killer,
    ):
        purpose_of_grouping = (
            f"–°–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã "
            f"–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ "
            f"–∏–ª–∏ —Ä–∞–≤–Ω–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–≥—Ä—ã"
        )
    elif current_role.grouping == Groupings.civilians:
        purpose_of_grouping = (
            f"–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ {Groupings.criminals.value.name} "
            f"–∏ {Groupings.killer.value.name}"
        )
    if purpose_of_grouping:
        common_text += (
            f"üéØ–¶–µ–ª—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {purpose_of_grouping}\n\n"
        )

    result_text = common_text + text

    await callback.message.delete()
    await callback.message.answer_photo(
        photo=current_role.photo,
        caption=make_build(result_text),
        reply_markup=go_back_to_options_kb(),
    )
