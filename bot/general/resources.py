from dataclasses import dataclass
from enum import StrEnum
from typing import assert_never

from utils.pretty_text import make_pretty


@dataclass
class Asset:
    name: str
    description: str
    cost: int


class Resources(StrEnum):
    anonymous_letters = "anonymous_letters"


def get_data_about_resource(resource: Resources) -> Asset:
    match resource:
        case Resources.anonymous_letters:
            return Asset(
                name="üíå–ê–Ω–æ–Ω–∏–º–∫–∏",
                description=(
                    "üíå–ê–Ω–æ–Ω–∏–º–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, "
                    "–≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–≥—Ä–∞, –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.\n"
                    "–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â–µ –∂–∏–≤.\n\n"
                    f'–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç–∞: {make_pretty('/anon "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"')}\n\n'
                    f"–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                    f"<blockquote>üò±üò±üò±–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨\n\n"
                    f'"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"</blockquote>'
                ),
                cost=750,
            )

        case _:
            assert_never(resource)


def get_cost_of_discounted_resource(
    cost: int, count: int
) -> tuple[int, int]:
    discounts = {
        20: 45,
        15: 40,
        10: 35,
        5: 25,
        3: 10,
        1: 0,
    }
    discount = 0
    for total, discount in discounts.items():
        if count >= total:
            break
    return round((count * cost) * ((100 - discount) / 100)), discount
