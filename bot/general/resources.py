from dataclasses import dataclass
from enum import StrEnum
from typing import assert_never


@dataclass
class Asset:
    name: str
    description: str


class Resources(StrEnum):
    anonymous_letters = "anonymous_letters"


def get_data_about_resource(resource: Resources) -> Asset:
    match resource:
        case Resources.anonymous_letters:
            return Asset(
                name="üíå–ê–Ω–æ–Ω–∏–º–∫–∏",
                description=(
                    "üíå–ê–Ω–æ–Ω–∏–º–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, "
                    "–≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–≥—Ä–∞, –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞.\n"
                    "–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â–µ –∂–∏–≤.\n\n"
                ),
            )

        case _:
            assert_never(resource)


def get_cost_of_discounted_resource(cost: int, count: int):
    return (count * cost) - ((count // 5) * cost)
